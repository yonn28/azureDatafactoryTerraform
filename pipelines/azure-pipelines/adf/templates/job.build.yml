parameters:
  - name: iacCdVariableGroupPrefix
    type: string
  - name: domain
    type: string
  - name: environment
    type: string
  - name: workingDirectory
    type: string
  - name: pipelineArtifactDirectory
    type: string
  - name: azureServiceConnectionName
    type: string

jobs:
  - job: build
    displayName: "Build Data Factory ARM Template"
    variables:
      - group: '${{ parameters.iacCdVariableGroupPrefix }}-${{ parameters.domain }}-${{ parameters.environment }}'
    steps:
    - task: AzureCLI@1
      displayName: "SETUP: Set Azure Credentials"
      inputs:
        azureSubscription: ${{ parameters.azureServiceConnectionName }}
        scriptLocation: inlineScript
        inlineScript: |
          set -eu
          subscriptionId=$(az account show --query id -o tsv)
          echo "##vso[task.setvariable variable=SUBSCRIPTION_ID]$subscriptionId"
        addSpnToEnvironment: true

    # Installs Node
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    # Installs the npm packages saved in your package.json file in the build
    - task: Npm@1
      inputs:
        command: 'install'
        workingDir: ${{ parameters.workingDirectory }}
        verbose: true
      displayName: 'Install npm package'

    # Validates all of the Data Factory resources in the repository. You'll get the same validation errors as when "Validate All" is selected.
    # Enter the appropriate subscription and name for the source factory.
    - task: Npm@1
      inputs:
        command: 'custom'
        workingDir: ${{ parameters.workingDirectory }}
        customCommand: 'run build validate $(Build.Repository.LocalPath)/${{ parameters.workingDirectory }} /subscriptions/$(SUBSCRIPTION_ID)/resourceGroups/$(resourceGroup)/providers/Microsoft.DataFactory/factories/$(dataFactoryName)'
      displayName: 'Validate'

    # Validate and then generate the ARM template into the destination folder, which is the same as selecting "Publish" from the UX.
    # The ARM template generated isn't published to the live version of the factory. Deployment should be done by using a CI/CD pipeline.
    - task: Npm@1
      inputs:
        command: 'custom'
        workingDir: ${{ parameters.workingDirectory }}
        customCommand: 'run build export $(Build.Repository.LocalPath)/${{ parameters.workingDirectory }} /subscriptions/$(SUBSCRIPTION_ID)/resourceGroups/$(resourceGroup)/providers/Microsoft.DataFactory/factories/$(dataFactoryName) "../ArmTemplates"'
      displayName: 'Validate and Generate ARM template'

    # Publish the artifact to be used as a source for a release pipeline.
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.Repository.LocalPath)/ArmTemplates'
        artifact: 'ArmTemplates-${{ parameters.environment }}'
        publishLocation: 'pipeline'
